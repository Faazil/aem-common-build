name: Upload AEM Package Workflow

on:
  workflow_call:
    inputs:
      AEM_ENV:
        required: true
        type: string

jobs:
  upload-package:
    runs-on: ubuntu-latest
    outputs:
      AEM_HOST: ${{ steps.extract_url.outputs.AEM_HOST }}
      AEM_HOST_AUTHOR: ${{ steps.extract_url.outputs.AEM_HOST_AUTHOR }}
      AEM_HOST_PREVIEW: ${{ steps.extract_url.outputs.AEM_HOST_PREVIEW }}
    steps:
      - name: Print environment variables
        run: echo "${{ inputs.AEM_ENV }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Environment Input
        id: validate
        run: |
          VALID_ENVIRONMENTS=$(awk '/awsAccounts:/{flag=1;next}/type/{flag=0}flag' .github/environments.yaml | sed 's/- //g' | tr '\n' ' ' | tr '[:upper:]' '[:lower:]')
          INPUT_ENVIRONMENT=$(echo "${{ inputs.AEM_ENV }}" | tr '[:upper:]' '[:lower:]')
          VALID_ENVIRONMENTS_ARRAY=($VALID_ENVIRONMENTS)
          if [[ " ${VALID_ENVIRONMENTS_ARRAY[@]} " =~ " ${INPUT_ENVIRONMENT} " ]]; then
            echo "Environment input is valid: ${INPUT_ENVIRONMENT}"
            echo "environment=${INPUT_ENVIRONMENT}" >> $GITHUB_ENV
            echo "environment=${INPUT_ENVIRONMENT}" >> $GITHUB_OUTPUT
          else
            echo "Invalid environment input: ${INPUT_ENVIRONMENT}"
            exit 1
          fi

      - name: Ensure env_urls.yaml is available
        run: |
          if [ ! -f .github/env_urls.yaml ]; then
            echo "env_urls.yaml not found in the repository."
            exit 1
          fi

      - name: Extract Environment URL
        id: extract_url
        env:
          environment: ${{ steps.validate.outputs.environment }}
        run: |
          environment=${environment}
          
          # Debug: Print the content of the env_urls.yaml file
          echo "Content of .github/env_urls.yaml:"
          cat .github/env_urls.yaml
          
          if [[ "$environment" == *"prod-live"* ]]; then
            stripped_env=$(echo "$environment" | sed 's/-live//')
            url=$(awk -v env="$stripped_env" -F": " '$1 ~ "^ *"env" *$" {print $2}' .github/env_urls.yaml | xargs)
            echo "Prod-live environment detected, URL: $url"
            echo "AEM_HOST_AUTHOR=$url" >> $GITHUB_ENV
          elif [[ "$environment" == *"prod"* ]] && [[ "$environment" != *"live"* ]]; then
            url_author=$(awk -v env="$environment" -F": " '$1 ~ "^ *"env" *$" {print $2}' .github/env_urls.yaml | xargs)
            url_preview=$(awk -v env="$environment" -F": " '$1 ~ "^ *"env"-preview *$" {print $2}' .github/env_urls.yaml | xargs)
            echo "Prod environment detected, URLs: $url_author, $url_preview"
            echo "AEM_HOST_AUTHOR=$url_author" >> $GITHUB_ENV
            echo "AEM_HOST_PREVIEW=$url_preview" >> $GITHUB_ENV
          else
            url=$(awk -v env="$environment" -F": " '$1 ~ "^ *"env" *$" {print $2}' .github/env_urls.yaml | xargs)
            echo "General environment detected, URL: $url"
            if [ -z "$url" ]; then
              echo "Invalid environment: $environment"
              exit 1
            fi
            echo "AEM_HOST=$url" >> $GITHUB_ENV
          fi

      - name: Debugging URL
        run: |
          echo "AEM_HOST_AUTHOR: $AEM_HOST_AUTHOR"
          echo "AEM_HOST_PREVIEW: $AEM_HOST_PREVIEW"
          echo "AEM_HOST: $AEM_HOST"

      - name: Upload AEM package to Author
        if: env.AEM_HOST_AUTHOR
        env:
          AEM_CREDENTIALS: ${{ secrets.AEM_CREDENTIALS }}
          AEM_PACKAGE_NAME: ${{ inputs.AEM_PACKAGE_NAME }}
          AEM_HOST_AUTHOR: ${{ env.AEM_HOST_AUTHOR }}
        run: |
          echo "Deploying to: $AEM_HOST_AUTHOR"
          RESPONSE=$(curl -u $AEM_CREDENTIALS \
            -F cmd=upload \
            -F force=true \
            -F package=@${AEM_PACKAGE_NAME} \
            --connect-timeout 10 \
            "$AEM_HOST_AUTHOR/crx/packmgr/service/.json")

          echo "Response: $RESPONSE"
          
          AEM_GROUP=$(echo $RESPONSE | grep -oP '(?<=<group>).*?(?=</group>)')
          AEM_DOWNLOAD_NAME=$(echo $RESPONSE | grep -oP '(?<=<downloadName>).*?(?=</downloadName>)')

          echo "AEM_GROUP=$AEM_GROUP" >> $GITHUB_ENV
          echo "AEM_DOWNLOAD_NAME=$AEM_DOWNLOAD_NAME" >> $GITHUB_ENV

      - name: Upload and Install AEM package
        run: |
          INSTALL_RESPONSE=$(curl -u admin:admin \
            -F file=@we.retail.community.apps-1.11.84.zip \
            -F name=test.zip \
            -F force=true \
            -F install=true \
            http://localhost:4502/crx/packmgr/service.jsp)

          echo "Install Response: $INSTALL_RESPONSE"

          AEM_GROUP=$(echo $INSTALL_RESPONSE | grep -oP '(?<=<group>).*?(?=</group>)')
          AEM_DOWNLOAD_NAME=$(echo $INSTALL_RESPONSE | grep -oP '(?<=<downloadName>).*?(?<=</downloadName>)')

          echo "AEM_GROUP=$AEM_GROUP" >> $GITHUB_ENV
          echo "AEM_DOWNLOAD_NAME=$AEM_DOWNLOAD_NAME" >> $GITHUB_ENV

      - name: Checking output 
        run: |
          echo "Extracted AEM_GROUP: $AEM_GROUP"
          echo "Extracted AEM_DOWNLOAD_NAME: $AEM_DOWNLOAD_NAME"

      - name: Upload AEM package to preview
        if: env.AEM_HOST_PREVIEW
        env:
          AEM_CREDENTIALS: ${{ secrets.AEM_CREDENTIALS }}
          AEM_PACKAGE_NAME: ${{ inputs.AEM_PACKAGE_NAME }}
          AEM_HOST_PREVIEW: ${{ env.AEM_HOST_PREVIEW }}
        run: |
          echo "Deploying to preview: $AEM_HOST_PREVIEW"
          curl -u $AEM_CREDENTIALS \
            -F cmd=upload \
            -F force=true \
            -F package=@${AEM_PACKAGE_NAME} \
            --connect-timeout 10 \
            "$AEM_HOST_PREVIEW/crx/packmgr/service/.json"

      - name: Upload AEM package to author (prod-live and non-prod environments)
        if: env.AEM_HOST_AUTHOR && (github.event.inputs.AEM_ENV == 'prod-live' || github.event.inputs.AEM_ENV != 'prod')
        env:
          AEM_CREDENTIALS: ${{ secrets.AEM_CREDENTIALS }}
          AEM_PACKAGE_NAME: ${{ inputs.AEM_PACKAGE_NAME }}
          AEM_HOST_AUTHOR: ${{ env.AEM_HOST_AUTHOR }}
        run: |
          echo "Deploying to author: $AEM_HOST_AUTHOR"
          curl -u $AEM_CREDENTIALS \
            -F cmd=upload \
            -F force=true \
            -F package=@${AEM_PACKAGE_NAME} \
            --connect-timeout 10 \
            "$AEM_HOST_AUTHOR/crx/packmgr/service/.json"
        
      - name: Activate AEM Package
        env:
          AEM_GROUP: ${{ env.AEM_GROUP }}
          AEM_DOWNLOAD_NAME: ${{ env.AEM_DOWNLOAD_NAME }}
        run: |
          echo "Activating package: $AEM_GROUP/$AEM_DOWNLOAD_NAME"
          ACTIVATION_RESPONSE=$(curl -u admin:admin \
            -X POST \
            -F path="/etc/packages/$AEM_GROUP/$AEM_DOWNLOAD_NAME" \
            -F cmd="activate" \
            http://localhost:4502/bin/replicate.json)

          echo "Activation Response: $ACTIVATION_RESPONSE"
